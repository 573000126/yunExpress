<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Reflection" #>

<#@ output extension=".cs"#>
<#

	 // This needs to be set to the .edmx file that you want to process.
	string edmxFile = @"../LMS.Data.Context/LMS_DBContext.edmx"; // FindEDMXFileName();@"Model1.edmx";

    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    MetadataTools ef = new MetadataTools(this);
    CodeRegion region = new CodeRegion(this, 1);
#>

<#
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
    EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
	    ;
	fileManager.StartNewFile("I"+entity.Name + "Repository.Generated.cs");

	string primaryKey = "";
	
#>
using System;
using System.Linq;
using System.Collections.Generic;

using System.Linq.Expressions;

using LighTake.Infrastructure.Common;
using LighTake.Infrastructure.Seedwork;
using LMS.Data.Entity;

// This file is auto generated and will be overwritten as soon as the template is executed
// Do not modify this file...
	
namespace <#= code.VsNamespaceSuggestion() #>
{   
	<#=Accessibility.ForType(entity)#><#=code.SpaceAfter(code.AbstractOption(entity))#> partial interface I<#=code.Escape(entity)#>Repository : IRepository<<#=code.Escape(entity)#>>
	{		
	
	}
}
<#	}
fileManager.Process(); #>


<#+

bool DoesFileExist(string filename)
{			
	return File.Exists(Path.Combine(GetCurrentDirectory(),filename));	
}

string OutputFile(string filename)
{
	using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
	{
		string contents = sr.ReadToEnd();
		return contents;
	}
}

string GetCurrentDirectory()
{
	string executingDirectoryName = "";
	string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
	if (String.IsNullOrEmpty(stackTraceFileName))
	{
		throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
			", and we could not figure out the file name from the stack trace (most likely because of running " +
			"the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
	}
	else
	{		
		executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
	}	
	return executingDirectoryName;
}

string FindEDMXFileName()
{
	string edmxFile = "";
				
	string[] entityFrameworkFiles = Directory.GetFiles(GetCurrentDirectory(), "*.edmx");
	if(entityFrameworkFiles.Length > 0)
		edmxFile = entityFrameworkFiles[0];
	
	return edmxFile;
}
#>
