//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 1573
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.Entity.Validation;
using System.Linq;
using System.Data.Entity.Core.Objects;

using LMS.Data.Entity;
using LighTake.Infrastructure.Seedwork;
using LighTake.Infrastructure.Seedwork.EF;

namespace LMS.Data.Context
{
    
    public partial class LMS_DbContext : DbContext, IQueryableUnitOfWork
    {
        static LMS_DbContext()
    	{ 
    		Database.SetInitializer<LMS_DbContext>(null);
    	}
    	
    	public LMS_DbContext() : base("name=LMS_DbContext")
        {
    		//this.Configuration.LazyLoadingEnabled = true;
    		//this.Configuration.ProxyCreationEnabled = false;
    		this.Configuration.UseDatabaseNullSemantics = true;
    		if (System.Configuration.ConfigurationManager.AppSettings["LogSql"] != null &&
        	        System.Configuration.ConfigurationManager.AppSettings["LogSql"] == "1")
        	    {
    				this.Database.Log = t => LighTake.Infrastructure.Common.Logging.Log.Debug(t);
    			}
        }
    	
    	public LMS_DbContext(string nameOrConnectionString) : base(nameOrConnectionString)
    	{	
    	}
    
    	public LMS_DbContext(string nameOrConnectionString, DbCompiledModel model) : base(nameOrConnectionString, model)
    	{
    	}
    
    	public LMS_DbContext(DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
    	{
    	}
    
    	public LMS_DbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
    	{
    	}
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
    		modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();
    		modelBuilder.Configurations.Add(new AbnormalWayBillLog_Mapping());
    		modelBuilder.Configurations.Add(new ApplicationInfo_Mapping());
    		modelBuilder.Configurations.Add(new Article_Mapping());
    		modelBuilder.Configurations.Add(new B2CPreAlertLogs_Mapping());
    		modelBuilder.Configurations.Add(new Category_Mapping());
    		modelBuilder.Configurations.Add(new CommonCountry_Mapping());
    		modelBuilder.Configurations.Add(new Country_Mapping());
    		modelBuilder.Configurations.Add(new CurrencyCategory_Mapping());
    		modelBuilder.Configurations.Add(new Customer_Mapping());
    		modelBuilder.Configurations.Add(new CustomerAmountRecord_Mapping());
    		modelBuilder.Configurations.Add(new CustomerBalance_Mapping());
    		modelBuilder.Configurations.Add(new CustomerCreditInfo_Mapping());
    		modelBuilder.Configurations.Add(new CustomerManagerInfo_Mapping());
    		modelBuilder.Configurations.Add(new CustomerOrderInfo_Mapping());
    		modelBuilder.Configurations.Add(new CustomerOrderStatus_Mapping());
    		modelBuilder.Configurations.Add(new CustomerSourceInfo_Mapping());
    		modelBuilder.Configurations.Add(new CustomerUpdatedLog_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryChannelChangeLog_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryChannelConfiguration_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryDeviation_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryFee_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryFeeInfo_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryImportAccountCheck_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryImportAccountChecksFinal_Mapping());
    		modelBuilder.Configurations.Add(new DeliveryImportAccountChecksTemp_Mapping());
    		modelBuilder.Configurations.Add(new DictionaryType_Mapping());
    		modelBuilder.Configurations.Add(new EubAccountInfo_Mapping());
    		modelBuilder.Configurations.Add(new EubWayBillApplicationInfo_Mapping());
    		modelBuilder.Configurations.Add(new ExpressAccountInfo_Mapping());
    		modelBuilder.Configurations.Add(new ExpressDeliveryImportAccountCheck_Mapping());
    		modelBuilder.Configurations.Add(new ExpressDeliveryImportAccountChecksTemp_Mapping());
    		modelBuilder.Configurations.Add(new ExpressRespons_Mapping());
    		modelBuilder.Configurations.Add(new FeeType_Mapping());
    		modelBuilder.Configurations.Add(new FinalExpressDeliveryImportAccountCheck_Mapping());
    		modelBuilder.Configurations.Add(new FuzhouPostLog_Mapping());
    		modelBuilder.Configurations.Add(new GoodsTypeInfo_Mapping());
    		modelBuilder.Configurations.Add(new GZPacketAddressInfo_Mapping());
    		modelBuilder.Configurations.Add(new InStorageInfo_Mapping());
    		modelBuilder.Configurations.Add(new InStorageOrSettlementRelational_Mapping());
    		modelBuilder.Configurations.Add(new InStorageWeightDeviation_Mapping());
    		modelBuilder.Configurations.Add(new InsuredCalculation_Mapping());
    		modelBuilder.Configurations.Add(new InTrackingLogInfo_Mapping());
    		modelBuilder.Configurations.Add(new JobErrorLog_Mapping());
    		modelBuilder.Configurations.Add(new LanguageInfo_Mapping());
    		modelBuilder.Configurations.Add(new LithuaniaInfo_Mapping());
    		modelBuilder.Configurations.Add(new MailExchangeBagLog_Mapping());
    		modelBuilder.Configurations.Add(new MailHoldLog_Mapping());
    		modelBuilder.Configurations.Add(new MailPostBagInfo_Mapping());
    		modelBuilder.Configurations.Add(new MailReturnGoodsLog_Mapping());
    		modelBuilder.Configurations.Add(new MailTotalPackageInfo_Mapping());
    		modelBuilder.Configurations.Add(new MailTotalPackageOrPostBagRelational_Mapping());
    		modelBuilder.Configurations.Add(new MoneyChangeTypeInfo_Mapping());
    		modelBuilder.Configurations.Add(new MouthCountry_Mapping());
    		modelBuilder.Configurations.Add(new NetherlandsParcelRespons_Mapping());
    		modelBuilder.Configurations.Add(new NoForecastAbnormal_Mapping());
    		modelBuilder.Configurations.Add(new OutStorageInfo_Mapping());
    		modelBuilder.Configurations.Add(new PaymentType_Mapping());
    		modelBuilder.Configurations.Add(new ReceivingBill_Mapping());
    		modelBuilder.Configurations.Add(new ReceivingExpens_Mapping());
    		modelBuilder.Configurations.Add(new ReceivingExpenseInfo_Mapping());
    		modelBuilder.Configurations.Add(new RechargeType_Mapping());
    		modelBuilder.Configurations.Add(new ReturnGoods_Mapping());
    		modelBuilder.Configurations.Add(new SenderInfo_Mapping());
    		modelBuilder.Configurations.Add(new SensitiveTypeInfo_Mapping());
    		modelBuilder.Configurations.Add(new SequenceNumber_Mapping());
    		modelBuilder.Configurations.Add(new SettlementDetailsInfo_Mapping());
    		modelBuilder.Configurations.Add(new SettlementInfo_Mapping());
    		modelBuilder.Configurations.Add(new ShippingInfo_Mapping());
    		modelBuilder.Configurations.Add(new SystemConfiguration_Mapping());
    		modelBuilder.Configurations.Add(new Task_Mapping());
    		modelBuilder.Configurations.Add(new TotalPackageInfo_Mapping());
    		modelBuilder.Configurations.Add(new TotalPackageOutStorageRelationalInfo_Mapping());
    		modelBuilder.Configurations.Add(new TotalPackageTraceInfo_Mapping());
    		modelBuilder.Configurations.Add(new TrackingNumberDetailInfo_Mapping());
    		modelBuilder.Configurations.Add(new TrackingNumberInfo_Mapping());
    		modelBuilder.Configurations.Add(new VenderFeeLog_Mapping());
    		modelBuilder.Configurations.Add(new WayBillBusinessDateInfo_Mapping());
    		modelBuilder.Configurations.Add(new WayBillChangeLog_Mapping());
    		modelBuilder.Configurations.Add(new WayBillEventLog_Mapping());
    		modelBuilder.Configurations.Add(new WayBillInfo_Mapping());
    		modelBuilder.Configurations.Add(new WayBillInfoImportTemp_Mapping());
    		modelBuilder.Configurations.Add(new WaybillPackageDetail_Mapping());
    		modelBuilder.Configurations.Add(new WayBillPrintLog_Mapping());
    		modelBuilder.Configurations.Add(new WayBillTemplate_Mapping());
    		modelBuilder.Configurations.Add(new WayBillTemplateInfo_Mapping());
    		modelBuilder.Configurations.Add(new WeightAbnormalLog_Mapping());
        }
    
    	#region IQueryableUnitOfWork Members
            
                public DbSet<TEntity> CreateSet<TEntity>()
                    where TEntity : class
                {
                    return base.Set<TEntity>();
                }
            
                public void Attach<TEntity>(TEntity item) 
                    where TEntity : class
                {
                    //attach and set as unchanged
                    base.Entry<TEntity>(item).State = EntityState.Unchanged;
                }
            
                public void SetModified<TEntity>(TEntity item) 
                    where TEntity : class
                {
                    //this operation also attach item in object state manager
                    base.Entry<TEntity>(item).State = EntityState.Modified;
                }
                public void ApplyCurrentValues<TEntity>(TEntity original, TEntity current)
                    where TEntity : class
                {
                    //if it is not attached, attach original and set current values
                    base.Entry<TEntity>(original).CurrentValues.SetValues(current);
                }
            
                public int Commit()
                {
            		try
            		{
            			return base.SaveChanges();
            		}
            		catch (DbEntityValidationException dbEx)
                    {
            
                        var msg = string.Empty;
            
                        foreach (var validationErrors in dbEx.EntityValidationErrors)
                            foreach (var validationError in validationErrors.ValidationErrors)
                                msg += string.Format("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage) + Environment.NewLine;
            
                        var fail = new Exception(msg, dbEx);
                        //Debug.WriteLine(fail.Message, fail);
                        throw fail;
                    }
                }
    
            private DbTransaction _transaction;
    
            public bool IsInTransaction { get { return _transaction != null; } }
            public void BeginTransaction()
            {
                BeginTransaction(IsolationLevel.ReadCommitted);
            }
    
            public void BeginTransaction(IsolationLevel isolationLevel)
            {
                if (_transaction != null)
                {
                    throw new ApplicationException("Cannot begin a new transaction while an existing transaction is still running. " +
                                                    "Please commit or rollback the existing transaction before starting a new one.");
                }
                OpenConnection();
                _transaction = base.Database.Connection.BeginTransaction(isolationLevel);
            }
    
            private void OpenConnection()
            {
                if (base.Database.Connection.State != ConnectionState.Open)
                {
                    base.Database.Connection.Open();
                }
            }
            public void RollbackTransaction()
            {
                _transaction.Rollback();
            }
    
            public void CommitTransaction()
            {
                if (_transaction == null)
                {
                    throw new ApplicationException("Cannot roll back a transaction while there is no transaction running.");
                }
    
                try
                {
                    base.SaveChanges();
                    _transaction.Commit();
                }
                catch
                {
                    _transaction.Rollback();
                    throw;
                }
                finally
                {
                    ReleaseCurrentTransaction();
                }
            }
    
            /// <summary>
            /// Releases the current transaction
            /// </summary>
            private void ReleaseCurrentTransaction()
            {
                if (_transaction != null)
                {
                    _transaction.Dispose();
                    _transaction = null;
                }
            }
    
            public void CommitAndRefreshChanges()
                {
                    bool saveFailed = false;
            
                    do
                    {
                        try
                        {
                            base.SaveChanges();
            
                            saveFailed = false;
            
                        }
                        catch (DbUpdateConcurrencyException ex)
                        {
                            saveFailed = true;
            
                            ex.Entries.ToList()
                                        .ForEach(entry =>entry.OriginalValues.SetValues(entry.GetDatabaseValues()));
            
                        }
                    } while (saveFailed);
            
                }
            
            public void RollbackChanges()
                {
                    // set all entities in change tracker 
                    // as 'unchanged state'
                    base.ChangeTracker.Entries()
                                        .ToList()
                                        .ForEach(entry => entry.State = EntityState.Detached);
                }
        
    
        /// <summary>
        /// Create database script
        /// </summary>
        /// <returns>SQL to generate database</returns>
        public string CreateDatabaseScript()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateDatabaseScript();
        }
    
        /// <summary>
        /// Get DbSet
        /// </summary>
        /// <typeparam name="TEntity">Entity type</typeparam>
        /// <returns>DbSet</returns>
        public new IDbSet<TEntity> Set<TEntity>() where TEntity : LighTake.Infrastructure.Seedwork.Entity
        {
            return base.Set<TEntity>();
        }
    
        public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
        {
            return base.Database.SqlQuery<TEntity>(sqlQuery, parameters);
        }
    
        public int ExecuteCommand(string sqlCommand, params object[] parameters)
        {
            return base.Database.ExecuteSqlCommand(sqlCommand, parameters);
        }
            
        public IList<TEntity> ExecuteStoredProcedureList<TEntity>(string commandText, params object[] parameters) 
        {
            //HACK: Entity Framework Code First doesn't support doesn't support output parameters
            //That's why we have to manually create command and execute it.
            //just wait until EF Code First starts support them
            //
            //More info: http://weblogs.asp.net/dwahlin/archive/2011/09/23/using-entity-framework-code-first-with-stored-procedures-that-have-output-parameters.aspx
        
            bool hasOutputParameters = false;
            if (parameters != null)
            {
                foreach (var p in parameters)
                {
                    var outputP = p as DbParameter;
                    if (outputP == null)
                        continue;
        
        			outputP.Value = outputP.Value??DBNull.Value;
        
                    if (outputP.Direction == ParameterDirection.InputOutput ||
                        outputP.Direction == ParameterDirection.Output)
                        hasOutputParameters = true;
                }
            }
        
        
        
            var context = ((IObjectContextAdapter)(this)).ObjectContext;
            if (!hasOutputParameters)
            {
                //no output parameters
                var result = this.Database.SqlQuery<TEntity>(commandText, parameters).ToList();
                //for (int i = 0; i < result.Count; i++)
                //    result[i] = AttachEntityToContext(result[i]);
                                
                return result;
                        
                //var result = context.ExecuteStoreQuery<TEntity>(commandText, parameters).ToList();
                //foreach (var entity in result)
                //    Set<TEntity>().Attach(entity);
                //return result;
            }
            else
            {
        
                //var connection = context.Connection;
                var connection = this.Database.Connection;
                //Don't close the connection after command execution
        
        
                //open the connection for use
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                //create a command object
                using (var cmd = connection.CreateCommand())
                {
                    //command to execute
                    cmd.CommandText = commandText;
                    cmd.CommandType = CommandType.StoredProcedure;
        
                    // move parameters to command object
                    if (parameters != null)
                        foreach (var p in parameters)
                            cmd.Parameters.Add(p);
        
                    //database call
                    var reader = cmd.ExecuteReader();
                    //return reader.DataReaderToObjectList<TEntity>();
                    var result = context.Translate<TEntity>(reader).ToList();
                    //for (int i = 0; i < result.Count; i++)
                    //    result[i] = AttachEntityToContext(result[i]);
                    //close up the reader, we're done saving results
                    reader.Close();
                    return result;
                }
        
            }
        }
    
        public bool ExecuteStoredProcedureList(string commandText, params object[] parameters)
        {
            //HACK: Entity Framework Code First doesn't support doesn't support output parameters
            //That's why we have to manually create command and execute it.
            //just wait until EF Code First starts support them
            //
            //More info: http://weblogs.asp.net/dwahlin/archive/2011/09/23/using-entity-framework-code-first-with-stored-procedures-that-have-output-parameters.aspx
        
            bool bResult = false;
            if (parameters != null)
            {
                foreach (var p in parameters)
                {
                    var outputP = p as DbParameter;
                    if (outputP == null)
                        continue;
                    outputP.Value = outputP.Value ?? DBNull.Value;
                }
            }
            //var connection = context.Connection;
            var connection = this.Database.Connection;
            //Don't close the connection after command execution
            //open the connection for use
            if (connection.State == ConnectionState.Closed)
                connection.Open();
            //create a command object
            using (var cmd = connection.CreateCommand())
            {
                //command to execute
                cmd.CommandText = commandText;
                cmd.CommandType = CommandType.StoredProcedure;
        
                // move parameters to command object
                if (parameters != null)
                    foreach (var p in parameters)
                        cmd.Parameters.Add(p);
        
                //database call
                DbDataReader reader = null;
                try
                {
                    reader = cmd.ExecuteReader();
                    bResult= true;
                }
                finally
                {
                    if (reader != null)
                        reader.Close();
                }
            }
            return bResult;
        }
    
        /// <summary>
        /// Creates a raw SQL query that will return elements of the given generic type.  The type can be any type that has properties that match the names of the columns returned from the query, or can be a simple primitive type. The type does not have to be an entity type. The results of this query are never tracked by the context even if the type of object returned is an entity type.
        /// </summary>
        /// <typeparam name="TElement">The type of object returned by the query.</typeparam>
        /// <param name="sql">The SQL query string.</param>
        /// <param name="parameters">The parameters to apply to the SQL query string.</param>
        /// <returns>Result</returns>
        public IEnumerable<TElement> SqlQuery<TElement>(string sql, params object[] parameters)
        {
            return this.Database.SqlQuery<TElement>(sql, parameters);
        }
        
        /// <summary>
        /// Executes the given DDL/DML command against the database.
        /// </summary>
        /// <param name="sql">The command string</param>
        /// <param name="doNotEnsureTransaction">false - the transaction creation is not ensured; true - the transaction creation is ensured.</param>
        /// <param name="timeout">Timeout value, in seconds. A null value indicates that the default value of the underlying provider will be used</param>
        /// <param name="parameters">The parameters to apply to the command string.</param>
        /// <returns>The result returned by the database after executing the command.</returns>
        public int ExecuteSqlCommand(string sql, bool doNotEnsureTransaction = false, int? timeout = null, params object[] parameters)
        {
            int? previousTimeout = null;
            if (timeout.HasValue)
            {
                //store previous timeout
                previousTimeout = ((IObjectContextAdapter) this).ObjectContext.CommandTimeout;
                ((IObjectContextAdapter) this).ObjectContext.CommandTimeout = timeout;
            }
    
            var transactionalBehavior = doNotEnsureTransaction
                ? TransactionalBehavior.DoNotEnsureTransaction
                : TransactionalBehavior.EnsureTransaction;
            var result = this.Database.ExecuteSqlCommand(transactionalBehavior, sql, parameters);
    
            if (timeout.HasValue)
            {
                //Set previous timeout back
                ((IObjectContextAdapter) this).ObjectContext.CommandTimeout = previousTimeout;
            }
    
            //return result
            return result;
        }
    
        #endregion
    
    	#region IDbSet Members
    
        public DbSet<ReturnGoods> ReturnGoods { get; set; }
        public DbSet<AbnormalWayBillLog> AbnormalWayBillLogs { get; set; }
        public DbSet<ApplicationInfo> ApplicationInfos { get; set; }
        public DbSet<Article> Articles { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<CommonCountry> CommonCountries { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CurrencyCategory> CurrencyCategories { get; set; }
        public DbSet<CustomerAmountRecord> CustomerAmountRecords { get; set; }
        public DbSet<CustomerBalance> CustomerBalances { get; set; }
        public DbSet<CustomerCreditInfo> CustomerCreditInfos { get; set; }
        public DbSet<CustomerOrderInfo> CustomerOrderInfos { get; set; }
        public DbSet<CustomerOrderStatus> CustomerOrderStatuses { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<DictionaryType> DictionaryTypes { get; set; }
        public DbSet<EubAccountInfo> EubAccountInfos { get; set; }
        public DbSet<ExpressAccountInfo> ExpressAccountInfos { get; set; }
        public DbSet<ExpressRespons> ExpressResponses { get; set; }
        public DbSet<FeeType> FeeTypes { get; set; }
        public DbSet<GoodsTypeInfo> GoodsTypeInfos { get; set; }
        public DbSet<InStorageInfo> InStorageInfos { get; set; }
        public DbSet<InsuredCalculation> InsuredCalculations { get; set; }
        public DbSet<InTrackingLogInfo> InTrackingLogInfos { get; set; }
        public DbSet<LanguageInfo> LanguageInfos { get; set; }
        public DbSet<MoneyChangeTypeInfo> MoneyChangeTypeInfos { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<RechargeType> RechargeTypes { get; set; }
        public DbSet<SenderInfo> SenderInfos { get; set; }
        public DbSet<SensitiveTypeInfo> SensitiveTypeInfos { get; set; }
        public DbSet<SequenceNumber> SequenceNumbers { get; set; }
        public DbSet<ShippingInfo> ShippingInfos { get; set; }
        public DbSet<TrackingNumberDetailInfo> TrackingNumberDetailInfos { get; set; }
        public DbSet<TrackingNumberInfo> TrackingNumberInfos { get; set; }
        public DbSet<VenderFeeLog> VenderFeeLogs { get; set; }
        public DbSet<WayBillInfo> WayBillInfos { get; set; }
        public DbSet<WaybillPackageDetail> WaybillPackageDetails { get; set; }
        public DbSet<WayBillPrintLog> WayBillPrintLogs { get; set; }
        public DbSet<WayBillTemplateInfo> WayBillTemplateInfos { get; set; }
        public DbSet<WayBillTemplate> WayBillTemplates { get; set; }
        public DbSet<DeliveryFeeInfo> DeliveryFeeInfos { get; set; }
        public DbSet<DeliveryFee> DeliveryFees { get; set; }
        public DbSet<ReceivingBill> ReceivingBills { get; set; }
        public DbSet<DeliveryDeviation> DeliveryDeviations { get; set; }
        public DbSet<DeliveryImportAccountCheck> DeliveryImportAccountChecks { get; set; }
        public DbSet<DeliveryImportAccountChecksFinal> DeliveryImportAccountChecksFinal { get; set; }
        public DbSet<ReceivingExpenseInfo> ReceivingExpenseInfos { get; set; }
        public DbSet<ReceivingExpens> ReceivingExpenses { get; set; }
        public DbSet<JobErrorLog> JobErrorLogs { get; set; }
        public DbSet<ExpressDeliveryImportAccountCheck> ExpressDeliveryImportAccountChecks { get; set; }
        public DbSet<FinalExpressDeliveryImportAccountCheck> FinalExpressDeliveryImportAccountChecks { get; set; }
        public DbSet<InStorageWeightDeviation> InStorageWeightDeviations { get; set; }
        public DbSet<DeliveryChannelConfiguration> DeliveryChannelConfigurations { get; set; }
        public DbSet<DeliveryImportAccountChecksTemp> DeliveryImportAccountChecksTemps { get; set; }
        public DbSet<ExpressDeliveryImportAccountChecksTemp> ExpressDeliveryImportAccountChecksTemps { get; set; }
        public DbSet<WayBillEventLog> WayBillEventLogs { get; set; }
        public DbSet<Task> Tasks { get; set; }
        public DbSet<WayBillChangeLog> WayBillChangeLogs { get; set; }
        public DbSet<SystemConfiguration> SystemConfigurations { get; set; }
        public DbSet<TotalPackageInfo> TotalPackageInfos { get; set; }
        public DbSet<TotalPackageTraceInfo> TotalPackageTraceInfos { get; set; }
        public DbSet<TotalPackageOutStorageRelationalInfo> TotalPackageOutStorageRelationalInfos { get; set; }
        public DbSet<NoForecastAbnormal> NoForecastAbnormals { get; set; }
        public DbSet<WayBillInfoImportTemp> WayBillInfoImportTemps { get; set; }
        public DbSet<MouthCountry> MouthCountries { get; set; }
        public DbSet<NetherlandsParcelRespons> NetherlandsParcelResponses { get; set; }
        public DbSet<CustomerManagerInfo> CustomerManagerInfos { get; set; }
        public DbSet<GZPacketAddressInfo> GZPacketAddressInfos { get; set; }
        public DbSet<FuzhouPostLog> FuzhouPostLogs { get; set; }
        public DbSet<DeliveryChannelChangeLog> DeliveryChannelChangeLogs { get; set; }
        public DbSet<InStorageOrSettlementRelational> InStorageOrSettlementRelationals { get; set; }
        public DbSet<SettlementDetailsInfo> SettlementDetailsInfos { get; set; }
        public DbSet<SettlementInfo> SettlementInfos { get; set; }
        public DbSet<CustomerUpdatedLog> CustomerUpdatedLogs { get; set; }
        public DbSet<MailTotalPackageInfo> MailTotalPackageInfos { get; set; }
        public DbSet<WayBillBusinessDateInfo> WayBillBusinessDateInfos { get; set; }
        public DbSet<MailTotalPackageOrPostBagRelational> MailTotalPackageOrPostBagRelationals { get; set; }
        public DbSet<MailPostBagInfo> MailPostBagInfos { get; set; }
        public DbSet<OutStorageInfo> OutStorageInfos { get; set; }
        public DbSet<MailExchangeBagLog> MailExchangeBagLogs { get; set; }
        public DbSet<MailReturnGoodsLog> MailReturnGoodsLogs { get; set; }
        public DbSet<WeightAbnormalLog> WeightAbnormalLogs { get; set; }
        public DbSet<MailHoldLog> MailHoldLogs { get; set; }
        public DbSet<EubWayBillApplicationInfo> EubWayBillApplicationInfos { get; set; }
        public DbSet<LithuaniaInfo> LithuaniaInfos { get; set; }
        public DbSet<CustomerSourceInfo> CustomerSourceInfos { get; set; }
        public DbSet<B2CPreAlertLogs> B2CPreAlertLogs { get; set; }
    
    	#endregion
    
        public virtual ObjectResult<string> P_CreateSequenceNumber(string headCode, Nullable<int> count)
        {
            var headCodeParameter = headCode != null ?
                new ObjectParameter("HeadCode", headCode) :
                new ObjectParameter("HeadCode", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("P_CreateSequenceNumber", headCodeParameter, countParameter);
        }
    
        public virtual ObjectResult<string> P_CreateWayBillNumber(string customerCode, string area, Nullable<int> count)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("P_CreateWayBillNumber", customerCodeParameter, areaParameter, countParameter);
        }
    }
}
