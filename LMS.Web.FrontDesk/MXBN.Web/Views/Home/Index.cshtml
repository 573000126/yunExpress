@model LMS.FrontDesk.Controllers.HomeController.Models.HomeListModel
@{
    ViewBag.Title = "主页";
}
@section ExtraHeadContent {
    <meta name="description" content="捷达通运">
    <meta name="Keywords" content="捷达通运">
}
 @Html.Partial("_HomeBannerPartial")
 @Html.Partial("_PriceSearchPartial")
 @Html.Partial("_CompanyNewPartial")
@Html.Partial("_About")
 @Html.Partial("_ContactUsPartial")
 @Html.Partial("_PartnersPartial")
 <script src="@Url.Content("~/Scripts/website/UtilEvent.js")" type="text/javascript"></script>
 <script src="@Url.Content("~/Scripts/website/cookie.js")" type="text/javascript"></script>   
<script src="@Url.Content("~/Scripts/website/info_sch.js")" type="text/javascript"></script>
<script type="text/javascript">
    window.onload = function() {
        var a_click = document.getElementById("ul_change_a2").getElementsByTagName("li"); //按钮列表
        var a_item = document.getElementById("change_3").getElementsByTagName("dd"); //BANNER列表
        var stop_box = document.getElementById("banner_box"); //整个BANNER区域
        var bg_box = document.getElementById("bg_box");
        var i = index = 0; //设置两个标量，赋值为0
        var timer = play = null; //定义两个空的对象，用于将来消除定时器
        for (i = 0, len = a_click.length; i < len; i++)   //遍历按钮，为每一个按钮附上一个索引，然后为每一个按钮添加鼠标事件
        {
            a_click[i].index = i;
            EventUtil.addHandler(a_click[i], "mouseover", show);
        }
        stop_box.onmouseover = function()    //当鼠标移动到了大的BANNER上，那么就清除自动播放的定时器
        {
            clearInterval(play);
        };
        stop_box.onmouseout = function()  //鼠标离开了，继续播放定时器
        {
            autoPlay();
        };

        function autoPlay()   //这里设置了一个自动播放的函数
        {
            play = setInterval(function() { //这就是传说中的自执行函数？
                index++; //这个index，是全局的，所串联整个效果的关键性参数
                index >= a_item.length && (index = 0);
                show();
            }, 4000);
        }

        autoPlay();

        function show() {
            index = this.index; //得到触发按钮的那个索
            /*alert(index);*/
            cookieUtil.set("bgColor", a_item[index].style.background);
            bg_box.style.background = cookieUtil.get("bgColor");
            if (cookieUtil.get("btnIndex"))  //如果cookie存在，
            {
                if (cookieUtil.get("btnIndex") == index)  //如果cookie存在，并且cookie的值等于现在的按钮的索引，那么就返回
                {
                    return;
                } else { //如果说存在，但是索引不等于按钮的索引，那么我就把Cookie的的值重新设置为现在按钮的index
                    /*alert("Cookie不等于按钮按钮所在的索引")*/
                    cookieUtil.set("btnIndex", this.index);
                }
            } else { //如果说cookie不存在，那么我也设置一个Cookie,把当前索引值设置进去
                cookieUtil.set("btnIndex", this.index);
                /*alert("设置了cookiele,并且取值等于:"+cookieUtil.get("btnIndex"))*/
            }

            var alpha = 0;
            for (i = 0; i < a_click.length; i++) {
                a_click[i].className = "";
            }
            a_click[index].className = "on";
            //clearInterval(play);	
            clearInterval(timer); //清除定时器，也就是，如果鼠标移动到了 当前按钮，那么就要清除上一次的计时器，因为怕速度太快导致当要触发这个计时器的时候，上一个计时器还没有结束

            for (i = 0; i < a_item.length; i++)  //循环，循环BANNER....
            {
                a_item[i].style.opacity = 0; //设置所有的BANNER的透明度为0;
                a_item[i].style.filter = "alpha(opacity=0)";
            }
            timer = setInterval(function() { //这里设置一个setInterval,每隔20秒指定一次一个自执行方法。
                alpha += 3; //设置透明参数为+=2；
                alpha > 100 && (alpha = 100);
                a_item[index].style.opacity = alpha / 100;
                a_item[index].style.filter = "alpha(opacity = " + alpha + ")";
                alpha == 100 && clearInterval(timer);
            }, 20);
        }
    };
</script>

