//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LighTake.Infrastructure.CommonQueue.API.Queue {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueModel", Namespace="http://schemas.datacontract.org/2004/07/LighTake.MQS.Dto")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    public partial class QueueModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="API.Queue.ILtQueue")]
    public interface ILtQueue {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILtQueue/Enqueue", ReplyAction="http://tempuri.org/ILtQueue/EnqueueResponse")]
        LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel Enqueue(string queueName, string[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILtQueue/Dequeue", ReplyAction="http://tempuri.org/ILtQueue/DequeueResponse")]
        LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel Dequeue(string queueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILtQueue/QueueLength", ReplyAction="http://tempuri.org/ILtQueue/QueueLengthResponse")]
        LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel QueueLength(string queueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILtQueue/WaitEnqueue", ReplyAction="http://tempuri.org/ILtQueue/WaitEnqueueResponse")]
        bool WaitEnqueue(string queueName, int timeOut);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILtQueueChannel : LighTake.Infrastructure.CommonQueue.API.Queue.ILtQueue, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LtQueueClient : System.ServiceModel.ClientBase<LighTake.Infrastructure.CommonQueue.API.Queue.ILtQueue>, LighTake.Infrastructure.CommonQueue.API.Queue.ILtQueue {
        
        public LtQueueClient() {
        }
        
        public LtQueueClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LtQueueClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LtQueueClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LtQueueClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel Enqueue(string queueName, string[] values) {
            return base.Channel.Enqueue(queueName, values);
        }
        
        public LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel Dequeue(string queueName) {
            return base.Channel.Dequeue(queueName);
        }
        
        public LighTake.Infrastructure.CommonQueue.API.Queue.QueueModel QueueLength(string queueName) {
            return base.Channel.QueueLength(queueName);
        }
        
        public bool WaitEnqueue(string queueName, int timeOut) {
            return base.Channel.WaitEnqueue(queueName, timeOut);
        }
    }
}
